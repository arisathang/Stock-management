# docker-compose.yml (Proxy Setup)
# This version uses an Nginx proxy, mirroring your working project.

services:
  # 1. Nginx Proxy Service (The new single entry point for the app)
  proxy:
    image: nginx:alpine
    container_name: stock_proxy
    ports:
      # Expose port 8000 on your Mac, which maps to port 80 in the proxy container.
      - "8000:80"
    volumes:
      # Mount the Nginx configuration file into the container
      - ./nginx.dev.conf:/etc/nginx/nginx.conf
    depends_on:
      - backend
      - frontend

  # 2. Database Service
  db:
    image: postgres:14-alpine
    container_name: stock_db
    restart: always
    environment:
      - POSTGRES_DB=stock_management
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/database-schema.sql:/docker-entrypoint-initdb.d/init.sql

  # 3. Backend Service
  backend:
    container_name: stock_backend
    build:
      context: ./backend
      dockerfile: Dockerfile
    volumes:
      - ./backend:/app
    environment:
      - DB_HOST=db
      - DB_NAME=stock_management
      - DB_USER=postgres
      - DB_PASS=password
      - FLASK_ENV=development
    depends_on:
      - db

  # 4. Frontend Service
  frontend:
    container_name: stock_frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - CHOKIDAR_USEPOLLING=true
      # The API URL is a relative path, handled by the proxy.
      - REACT_APP_API_URL=/api
    depends_on:
      - backend

volumes:
  postgres_data:
